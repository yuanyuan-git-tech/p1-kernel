diff --git a/src/exp4a/include/sched.h b/src/exp4a/include/sched.h
index 62f841b..3c55419 100644
--- a/src/exp4a/include/sched.h
+++ b/src/exp4a/include/sched.h
@@ -22,6 +22,7 @@
 */
 #define TASK_RUNNING				0
 /* TODO: define more task states (as constants) below, e.g. TASK_WAIT */
+#define TASK_WAIT                   1
 
 extern struct task_struct *current;
 extern struct task_struct * task[NR_TASKS];
@@ -51,6 +52,7 @@ struct task_struct {
 	long counter;	// how long this task has been running? decreases by 1 each timer tick. Reaching 0, kernel will attempt to schedule another task. Support our simple sched
 	long priority;	// when kernel schedules a new task, the kernel copies the task's  `priority` value to `counter`. Regulate CPU time the task gets relative to other tasks 
 	long preempt_count; // a flag. A non-zero means that the task is executing in a critical code region cannot be interrupted, Any timer tick should be ignored and not triggering rescheduling
+	unsigned long wake_up_times;
 };
 
 extern void sched_init(void);
@@ -61,6 +63,10 @@ extern void schedule(void);
 extern void switch_to(struct task_struct* next);
 extern void cpu_switch_to(struct task_struct* prev, struct task_struct* next);
 
+extern int no_runnable_tasks(void);
+extern void sleep(unsigned int x);
+extern void check_wait_to_ready_tasks( void );
+
 // the initial values for task_struct that belongs to the init task. see sched.c 
 #define INIT_TASK 									\
 { 													\
@@ -68,7 +74,7 @@ extern void cpu_switch_to(struct task_struct* prev, struct task_struct* next);
 	0,	/* state */									\
 	0,	/* counter */								\
 	1,	/* priority */								\
-	0 	/* preempt_count */							\
+	0, 	/* preempt_count */							\
 }
 
 #endif
diff --git a/src/exp4a/include/timer.h b/src/exp4a/include/timer.h
index 0e32fad..cc81e1c 100644
--- a/src/exp4a/include/timer.h
+++ b/src/exp4a/include/timer.h
@@ -6,8 +6,13 @@ void handle_timer_irq ( void );
 
 void generic_timer_init ( void );
 void handle_generic_timer_irq ( void );
+void set_timer_interval( unsigned long );
+void clear_timer_interrupt( void );
 
 extern void gen_timer_init();
-extern void gen_timer_reset();
+extern void gen_timer_reset( int );
+
+extern unsigned int get_timer_frequency( void );
+extern unsigned int get_system_time_ticks( void );
 
 #endif  /*_TIMER_H */
diff --git a/src/exp4a/src/irq.c b/src/exp4a/src/irq.c
index bfdf66f..e003849 100644
--- a/src/exp4a/src/irq.c
+++ b/src/exp4a/src/irq.c
@@ -3,6 +3,7 @@
 #include "timer.h"
 #include "entry.h"
 #include "peripherals/irq.h"
+#include "sched.h"
 
 const char *entry_error_messages[] = {
     "SYNC_INVALID_EL1t",
@@ -36,9 +37,11 @@ void handle_irq(void)
 {
     // Each Core has its own pending local intrrupts register
     unsigned int irq = get32(INT_SOURCE_0);
+    unsigned int interval = (1 << 26);
     switch (irq) {
         case (GENERIC_TIMER_INTERRUPT):
-            handle_generic_timer_irq();
+            gen_timer_reset(interval);
+            check_wait_to_ready_tasks();
             break;
         default:
             printf("Unknown pending irq: %x\r\n", irq);
diff --git a/src/exp4a/src/kernel.c b/src/exp4a/src/kernel.c
index d0b1cde..66050f1 100644
--- a/src/exp4a/src/kernel.c
+++ b/src/exp4a/src/kernel.c
@@ -16,7 +16,12 @@
 #define CHAR_DELAY (1000000)
 #endif
 
-void process(char *array)
+struct process_args {
+    char *array;
+	int sleep_time_sec;
+};
+
+void process(struct process_args *args) 
 {
 #ifdef USE_LFB // (optional) determine the init locations on the graphical console
 	int scr_x, scr_y; 
@@ -27,7 +32,9 @@ void process(char *array)
 		scr_x = 0; scr_y = 480; 
 	}
 #endif 
-
+	char *array = args->array;
+	int sleep_time_sec = args->sleep_time_sec;
+	
 	while (1){
 		for (int i = 0; i < 5; i++){
 			uart_send(array[i]);
@@ -40,6 +47,7 @@ void process(char *array)
 #endif
 			delay(CHAR_DELAY);
 		} 
+		sleep(sleep_time_sec);
 		schedule(); // yield
 	}
 
@@ -60,7 +68,7 @@ void kernel_main(void)
 	irq_vector_init();
 	generic_timer_init();
 	enable_interrupt_controller();
-	disable_irq();		
+	enable_irq();		
 
 #ifdef USE_LFB // (optional) init output to the graphical console
 	lfb_init(); 
@@ -68,19 +76,27 @@ void kernel_main(void)
 	lfb_print(0, 240, "kernel boots");
 #endif		
 
-	int res = copy_process((unsigned long)&process, (unsigned long)"12345");
+	static struct process_args arg_1 = {"12345", 6};
+	static struct process_args arg_2 = {"abcde", 2};
+	
+	int res = copy_process((unsigned long)&process, (unsigned long)&arg_1);
 	if (res != 0) {
 		printf("error while starting process 1");
 		return;
 	}
 	
-	res = copy_process((unsigned long)&process, (unsigned long)"abcde");
+	res = copy_process((unsigned long)&process, (unsigned long)&arg_2);
 	if (res != 0) {
 		printf("error while starting process 2");
 		return;
 	}
 
 	while (1){
-		schedule();
+		if (no_runnable_tasks()) {
+			printf("In idle task...\n");
+			asm ("wfi"); // WFI instruction to put CPU to sleep
+        } else {
+            schedule(); // If there are runnable tasks, call the scheduler
+        }
 	}	
 }
diff --git a/src/exp4a/src/sched.c b/src/exp4a/src/sched.c
index 6d38e06..eced75f 100644
--- a/src/exp4a/src/sched.c
+++ b/src/exp4a/src/sched.c
@@ -1,43 +1,54 @@
 #include "sched.h"
 #include "irq.h"
 #include "printf.h"
+#include "timer.h"
+#include <limits.h>
 
 static struct task_struct init_task = INIT_TASK; // the very first task with its task_struct values
 struct task_struct *current = &(init_task);		 // points to the currently running task. when kernel boots, sets to init_task
-struct task_struct * task[NR_TASKS] = {&(init_task), }; // holds all task_strcuts. only has init_ask at beginning
+struct task_struct *task[NR_TASKS] = {
+	&(init_task),
+}; // holds all task_strcuts. only has init_ask at beginning
 int nr_tasks = 1;
 
 void _schedule(void)
 {
 	int next, c;
-	struct task_struct * p;
-	while (1) {
-		c = -1;	// the maximum counter found so far
+	struct task_struct *p;
+	while (1)
+	{
+		c = -1; // the maximum counter found so far
 		next = 0;
 
-		/* Iterates over all tasks and tries to find a task in 
-		TASK_RUNNING state with the maximum counter. If such 
-		a task is found, we immediately break from the while loop 
+		/* Iterates over all tasks and tries to find a task in
+		TASK_RUNNING state with the maximum counter. If such
+		a task is found, we immediately break from the while loop
 		and switch to this task. */
 
-		for (int i = 0; i < NR_TASKS; i++){
+		for (int i = 0; i < NR_TASKS; i++)
+		{
 			p = task[i];
-			if (p && p->state == TASK_RUNNING && p->counter > c) { /* NB: p->counter always be non negative */
+			if (p && p->state == TASK_RUNNING && p->counter > c)
+			{ /* NB: p->counter always be non negative */
 				c = p->counter;
 				next = i;
 			}
 		}
-		if (c) {	/* found a RUNNING/READY task w/ the most positive counter.  NB: c won't be -1 as counter always nonnegative */
+		if (c)
+		{ /* found a RUNNING/READY task w/ the most positive counter.  NB: c won't be -1 as counter always nonnegative */
 			break;
 		}
 
-		/* If no such task is found, this is either because i) no 
+		/* If no such task is found, this is either because i) no
 		task is in TASK_RUNNING state or ii) all such tasks have 0 counters.
-		in our current implemenation which misses TASK_WAIT, only condition ii) is possible. 
+		in our current implemenation which misses TASK_WAIT, only condition ii) is possible.
 		Hence, we recharge counters. Bump counters for all tasks once. */
-		for (int i = 0; i < NR_TASKS; i++) {
+		for (int i = 0; i < NR_TASKS; i++)
+		{
 			p = task[i];
-			if (p) {
+			if (p && p->state == TASK_WAIT) {
+				continue;
+			} else if (p) {
 				p->counter = (p->counter >> 1) + p->priority; // The increment depends on a task's priority.
 			}
 		}
@@ -54,16 +65,76 @@ void schedule(void)
 }
 
 // where the multitasking magic happens
-void switch_to(struct task_struct * next) 
+void switch_to(struct task_struct *next)
 {
-	if (current == next) 
+	if (current == next)
 		return;
-	struct task_struct * prev = current;
+	struct task_struct *prev = current;
 	current = next;
 	cpu_switch_to(prev, next); // do context switch
 }
 
-void schedule_tail(void) {
+void schedule_tail(void)
+{
 	/* nothing */
 }
 
+void update_timer_for_sleep() {
+    unsigned long nearest_wake_up = ULONG_MAX;
+	struct task_struct *p;	
+    for (int i = 0; i < NR_TASKS; i++) {
+		p = task[i];
+        if (p && p->state == TASK_WAIT && p->wake_up_times < nearest_wake_up) {
+            nearest_wake_up = p->wake_up_times;
+        }
+    }
+    if (nearest_wake_up != ULONG_MAX) {
+        set_timer_interval(nearest_wake_up); // Set the hardware timer
+    }
+}
+
+void sleep(unsigned int sleep_time_sec)
+{
+	unsigned long timer_freq = get_timer_frequency();
+	unsigned long interval = sleep_time_sec * timer_freq;
+	unsigned long current_time = get_system_time_ticks();
+    unsigned long wake_up_time = current_time + interval;
+	current->state = TASK_WAIT;
+	current->wake_up_times = wake_up_time;
+	printf("\nThe task will wake up at %u ticks\r\n", current->wake_up_times);
+	update_timer_for_sleep();
+}
+
+void check_wait_to_ready_tasks( void ) {
+	unsigned long current_time = get_system_time_ticks();
+    unsigned long next_wake_up = ULONG_MAX;
+    struct task_struct *p;
+	printf("Timer IRQ received...\n");
+	clear_timer_interrupt();
+    for (int i = 0; i < NR_TASKS; i++) {
+		p = task[i];
+		// Wake up tasks whose wake-up time has passed
+        if (p && p->state == TASK_WAIT && p->wake_up_times <= current_time) {
+            p->state = TASK_RUNNING;
+        }
+		// Find the next task to wake up
+        else if (p && p->state == TASK_WAIT && p->wake_up_times < next_wake_up) {
+            next_wake_up = p->wake_up_times;
+        }
+    }
+	if (next_wake_up != ULONG_MAX) {
+        unsigned long interval = next_wake_up > current_time ? next_wake_up - current_time : 0;
+        set_timer_interval(interval); // Set timer for the next wake-up
+    }
+}
+
+int no_runnable_tasks(void) {
+	struct task_struct *p;
+	for (int i = 1; i < NR_TASKS; i++) {
+		p = task[i];
+		if (p && p->state == TASK_RUNNING) { 
+			return 0;
+		}
+	}
+	return 1;
+}
diff --git a/src/exp4a/src/timer.S b/src/exp4a/src/timer.S
index 80b861f..8c863d3 100644
--- a/src/exp4a/src/timer.S
+++ b/src/exp4a/src/timer.S
@@ -17,4 +17,14 @@ gen_timer_reset:
 #    mov x0, #1
 #	lsl x0, x0, #24 
 	msr CNTP_TVAL_EL0, x0
-    ret
\ No newline at end of file
+    ret
+
+.global get_timer_frequency
+get_timer_frequency:
+    mrs x0, CNTFRQ_EL0
+    ret
+
+.global get_system_time_ticks
+get_system_time_ticks:
+	mrs x0, CNTPCT_EL0
+	ret
\ No newline at end of file
diff --git a/src/exp4a/src/timer.c b/src/exp4a/src/timer.c
index 1413cdb..988ba3a 100644
--- a/src/exp4a/src/timer.c
+++ b/src/exp4a/src/timer.c
@@ -23,6 +23,16 @@ void handle_generic_timer_irq( void )
 {
 	// TODO: In order to implement sleep(t), you should calculate @interval based on t, 
 	// instead of having a fixed @interval which triggers periodic interrupts
-	gen_timer_reset(interval);	
-	printf("Timer interrupt received. next in %u ticks\n\r", interval);
+	check_wait_to_ready_tasks();
+}
+
+void set_timer_interval( unsigned long timer_interval ) {
+	gen_timer_reset(timer_interval);
+}
+
+void clear_timer_interrupt() {
+    unsigned long cntp_ctl_value;
+    asm volatile("mrs %0, CNTP_CTL_EL0" : "=r" (cntp_ctl_value));
+    cntp_ctl_value &= ~2; // Clear the ISTATUS bit
+    asm volatile("msr CNTP_CTL_EL0, %0" :: "r"(cntp_ctl_value));
 }
diff --git a/src/exp4a/test.log b/src/exp4a/test.log
index 8347e60..407120f 100644
--- a/src/exp4a/test.log
+++ b/src/exp4a/test.log
@@ -1 +1,19 @@
 Exception return from AArch64 EL2 to AArch64 EL1 PC 0x80038
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x82744
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x82744
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x826fc
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x826fc
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x826fc
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x826fc
