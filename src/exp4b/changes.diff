diff --git a/src/exp4b/changes.diff b/src/exp4b/changes.diff
index 0fa02aa..e69de29 100644
--- a/src/exp4b/changes.diff
+++ b/src/exp4b/changes.diff
@@ -1,301 +0,0 @@
-diff --git a/src/exp4b/include/sched.h b/src/exp4b/include/sched.h
-index 3885ee3..4944cf4 100644
---- a/src/exp4b/include/sched.h
-+++ b/src/exp4b/include/sched.h
-@@ -14,6 +14,8 @@
- 
- #define TASK_RUNNING				0
- 
-+#define TRACE_SIZE             50
-+
- extern struct task_struct *current;
- extern struct task_struct * task[NR_TASKS];
- extern int nr_tasks;
-@@ -42,6 +44,16 @@ struct task_struct {
- 	long preempt_count;
- };
- 
-+struct context_switch_trace {
-+	unsigned long timestamp;
-+	int task_out_id;
-+	unsigned long task_out_pc;
-+    unsigned long task_out_sp;
-+    int task_in_id;
-+    unsigned long task_in_pc;
-+    unsigned long task_in_sp;
-+};
-+
- extern void sched_init(void);
- extern void schedule(void);
- extern void timer_tick(void);
-@@ -49,6 +61,10 @@ extern void preempt_disable(void);
- extern void preempt_enable(void);
- extern void switch_to(struct task_struct* next);
- extern void cpu_switch_to(struct task_struct* prev, struct task_struct* next);
-+extern int getpid(void);
-+extern unsigned long get_task_pc(struct task_struct* task);
-+extern unsigned long get_task_sp(struct task_struct* task);
-+extern void print_trace_records(void);
- 
- #define INIT_TASK \
- /*cpu_context*/	{ {0,0,0,0,0,0,0,0,0,0,0,0,0}, \
-diff --git a/src/exp4b/include/timer.h b/src/exp4b/include/timer.h
-index 83529c1..a7a21d1 100644
---- a/src/exp4b/include/timer.h
-+++ b/src/exp4b/include/timer.h
-@@ -10,4 +10,8 @@ void handle_generic_timer_irq ( void );
- extern void gen_timer_init();
- extern void gen_timer_reset(int interval);
- 
-+extern unsigned long get_time_ms();
-+extern unsigned long get_system_timer_ticks();
-+extern unsigned long get_system_timer_frq();
-+
- #endif  /*_TIMER_H */
-diff --git a/src/exp4b/src/kernel.c b/src/exp4b/src/kernel.c
-index ae50ca0..d7f5ea4 100644
---- a/src/exp4b/src/kernel.c
-+++ b/src/exp4b/src/kernel.c
-@@ -26,6 +26,26 @@ void process2(char *array)
- 	}
- }
- 
-+void process3(char *array)
-+{
-+	while (1) {
-+		for (int i = 0; i < 5; i++){
-+			uart_send(array[i]);
-+			delay(5000000);
-+		}
-+	}
-+}
-+
-+void process4(char *array)
-+{
-+	while (1) {
-+		for (int i = 0; i < 5; i++){
-+			uart_send(array[i]);
-+			delay(5000000);
-+		}
-+	}
-+}
-+
- void kernel_main(void)
- {
- 	uart_init();
-@@ -48,6 +68,16 @@ void kernel_main(void)
- 		printf("error while starting process 2");
- 		return;
- 	}
-+	res = copy_process((unsigned long)&process3, (unsigned long)"ABCDE");
-+	if (res != 0) {
-+		printf("error while starting process 3");
-+		return;
-+	}
-+	res = copy_process((unsigned long)&process4, (unsigned long)"!!!!!");
-+	if (res != 0) {
-+		printf("error while starting process 4");
-+		return;
-+	}
- 
- 	while (1){
- 		schedule();
-diff --git a/src/exp4b/src/sched.S b/src/exp4b/src/sched.S
-index 669b5c8..61dbf72 100644
---- a/src/exp4b/src/sched.S
-+++ b/src/exp4b/src/sched.S
-@@ -23,3 +23,22 @@ cpu_switch_to:
- 	mov	sp, x9
- 	ret							// branch to LR (which was just loaded from memory)
- 
-+.globl get_task_pc
-+get_task_pc:
-+	ldr x0, [x0, #90]
-+	ret
-+
-+.globl get_task_sp
-+get_task_sp:
-+	ldr x0, [x0, #96]
-+	ret
-+
-+// Registers x19 to x30 are callee-saved registers.
-+// x30 (the link register) holds the return address for the function call, saving it ensures the task can resume execution from the correct point.
-+// The stack pointer for the next task (x1's task) is loaded into sp.
-+
-+// The x0 register is expected to hold the pointer to the current task's structure, while x1 will hold the pointer to the next task's structure.
-+// add x8, x0, x10: This instruction calculates the address where the CPU context needs to be saved within the current task's structure. It adds the offset stored in x10 to the base address of the current task's structure (presumably stored in x0) and stores the result in x8. x8 now points to the location where the registers should be saved.
-+
-+// stp x19, x20, [x8], #16: This instruction stores the pair of registers x19 and x20 at the location pointed to by x8, and then automatically increments x8 by 16 bytes (the size of two registers). The stp instruction is used for "store pair", which is efficient for saving two registers at once.
-+// The instruction str x30, [x8] is used to store the content of register x30 into the memory location pointed to by x8.
-\ No newline at end of file
-diff --git a/src/exp4b/src/sched.c b/src/exp4b/src/sched.c
-index 7fbf9fc..607c6db 100644
---- a/src/exp4b/src/sched.c
-+++ b/src/exp4b/src/sched.c
-@@ -1,11 +1,31 @@
- #include "sched.h"
- #include "irq.h"
- #include "printf.h"
-+#include "timer.h"
- 
- static struct task_struct init_task = INIT_TASK;
- struct task_struct *current = &(init_task);
- struct task_struct * task[NR_TASKS] = {&(init_task), };
- int nr_tasks = 1;
-+struct context_switch_trace trace_buffer[TRACE_SIZE];
-+int trace_index = 0;
-+
-+void record_context_switch(int out_id, unsigned long out_pc, unsigned long out_sp,
-+                           int in_id, unsigned long in_pc, unsigned long in_sp) {
-+    if (trace_index < TRACE_SIZE) {
-+        // Directly access the structure in the pre-allocated array
-+        trace_buffer[trace_index].timestamp = get_time_ms();
-+        trace_buffer[trace_index].task_out_id = out_id;
-+        trace_buffer[trace_index].task_out_pc = out_pc;
-+        trace_buffer[trace_index].task_out_sp = out_sp;
-+        trace_buffer[trace_index].task_in_id = in_id;
-+        trace_buffer[trace_index].task_in_pc = in_pc;
-+        trace_buffer[trace_index].task_in_sp = in_sp;
-+        // Increment the index for the next use
-+        trace_index++;
-+    }
-+}
-+
- 
- void preempt_disable(void)
- {
-@@ -23,6 +43,7 @@ void _schedule(void)
- 	/* ensure no context happens in the following code region
- 		we still leave irq on, because irq handler may set a task to be TASK_RUNNING, which 
- 		will be picked up by the scheduler below */
-+
- 	preempt_disable(); 
- 	int next,c;
- 	struct task_struct * p;
-@@ -58,6 +79,18 @@ void _schedule(void)
- 			}
- 		}
- 	}
-+
-+	/* 
-+		After 50 context switches, print out a list of switch records to UART
-+	*/
-+	if (trace_index == TRACE_SIZE - 1) {
-+		disable_irq();
-+		print_trace_records();
-+		while (1) {
-+		}
-+		enable_irq();
-+	}
-+
- 	switch_to(task[next]);
- 	preempt_enable();
- }
-@@ -72,6 +105,23 @@ void switch_to(struct task_struct * next)
- {
- 	if (current == next) 
- 		return;
-+	
-+	int out_id = getpid();
-+    int in_id = -1;
-+    for (int i = 0; i < NR_TASKS; i++) {
-+        if (task[i] == next) {
-+            in_id = i;
-+            break;
-+        }   
-+    }
-+
-+	unsigned long out_pc = current->cpu_context.pc;
-+    unsigned long out_sp = current->cpu_context.sp;
-+    unsigned long in_pc = get_task_pc(next);
-+    unsigned long in_sp = get_task_sp(next);
-+
-+	record_context_switch(out_id, out_pc, out_sp, in_id, in_pc, in_sp);
-+
- 	struct task_struct * prev = current;
- 	current = next;
- 
-@@ -110,3 +160,22 @@ void timer_tick()
- 	/* disable irq until kernel_exit, in which eret will resort the interrupt flag from spsr, which sets it on. */
- 	disable_irq(); 
- }
-+
-+
-+int getpid(void) {
-+	for (int i = 0; i < NR_TASKS; i++) {
-+			if (task[i] == current) {
-+				return i;
-+			}
-+	}
-+	return -1;
-+}
-+
-+void print_trace_records(void) {
-+    for (int i = 0; i < trace_index; i++) {
-+		printf("\n%d from task%d (PC 0x%x SP 0x%x) to task%d (PC 0x%x SP 0x%x)",
-+            trace_buffer[i].timestamp,
-+            trace_buffer[i].task_out_id, trace_buffer[i].task_out_pc, trace_buffer[i].task_out_sp,
-+            trace_buffer[i].task_in_id, trace_buffer[i].task_in_pc, trace_buffer[i].task_in_sp);
-+        }
-+}
-diff --git a/src/exp4b/src/timer.S b/src/exp4b/src/timer.S
-index 9307aec..da37a31 100644
---- a/src/exp4b/src/timer.S
-+++ b/src/exp4b/src/timer.S
-@@ -15,4 +15,14 @@ gen_timer_init:
- .globl gen_timer_reset
- gen_timer_reset:
- 	msr CNTP_TVAL_EL0, x0
--    ret
-\ No newline at end of file
-+    ret
-+
-+.global get_system_timer_ticks
-+get_system_timer_ticks:
-+	mrs x0, CNTPCT_EL0
-+	ret
-+
-+.global get_system_timer_frq
-+get_system_timer_frq:
-+	mrs x0, CNTFRQ_EL0
-+	ret
-diff --git a/src/exp4b/src/timer.c b/src/exp4b/src/timer.c
-index 4c09244..5edf7f5 100644
---- a/src/exp4b/src/timer.c
-+++ b/src/exp4b/src/timer.c
-@@ -7,15 +7,21 @@
- #ifdef USE_QEMU
- int interval = (1 << 26); // xzl: around 1 sec
- #else
--int interval = 1 * 1000 * 1000; // xzl: around 1 sec
-+int interval = 1 * 100 * 1000; // xzl: around 1 sec
- #endif
- 
-+void init_timer(void) {
-+	#ifdef USE_QEMU
-+    	interval = get_system_timer_frq() / 10;
-+	#endif	
-+}
-+
- /* 	These are for Arm generic timer. 
- 	They are fully functional on both QEMU and Rpi3 
- 	Recommended.
- */
- void generic_timer_init ( void )
--{
-+{	
- 	printf("interval is set to: %u\r\n", interval);
- 	gen_timer_init();
- 	gen_timer_reset(interval);
-@@ -51,4 +57,10 @@ void handle_timer_irq( void )
- 	put32(TIMER_C1, curVal);
- 	put32(TIMER_CS, TIMER_CS_M1);
- 	timer_tick();
-+}
-+
-+unsigned long get_time_ms(void) {	
-+	unsigned long freq = get_system_timer_frq();
-+    unsigned long timer_ticks = get_system_timer_ticks();
-+    return (timer_ticks * 1000) / freq;
- }
-\ No newline at end of file
diff --git a/src/exp4b/include/sched.h b/src/exp4b/include/sched.h
index 4944cf4..d07ee0b 100644
--- a/src/exp4b/include/sched.h
+++ b/src/exp4b/include/sched.h
@@ -42,6 +42,8 @@ struct task_struct {
 	long counter; /* countdown for scheduling. higher value means having run for less. recharged in schedule(). decremented in timer_tick(). always non negative */
 	long priority;
 	long preempt_count;
+	unsigned long pc_in_process;
+	unsigned long sp_in_process;
 };
 
 struct context_switch_trace {
@@ -62,13 +64,11 @@ extern void preempt_enable(void);
 extern void switch_to(struct task_struct* next);
 extern void cpu_switch_to(struct task_struct* prev, struct task_struct* next);
 extern int getpid(void);
-extern unsigned long get_task_pc(struct task_struct* task);
-extern unsigned long get_task_sp(struct task_struct* task);
 extern void print_trace_records(void);
 
 #define INIT_TASK \
 /*cpu_context*/	{ {0,0,0,0,0,0,0,0,0,0,0,0,0}, \
-/* state etc */	0,0,1, 0 \
+/* state etc */	0,0,1, 0, 0, 0\
 }
 
 #endif
diff --git a/src/exp4b/src/entry.S b/src/exp4b/src/entry.S
index c85164f..7b0a4ad 100644
--- a/src/exp4b/src/entry.S
+++ b/src/exp4b/src/entry.S
@@ -32,6 +32,9 @@
 	stp	x26, x27, [sp, #16 * 13]
 	stp	x28, x29, [sp, #16 * 14]
 
+	mrs x0, elr_el1 
+	add x1, sp, #S_FRAME_SIZE
+
 	mrs	x22, elr_el1
 	mrs	x23, spsr_el1
 
@@ -139,6 +142,7 @@ error_invalid_el0_32:
 
 el1_irq:
 	kernel_entry 
+	bl get_current_task_pc_and_sp
 	bl	handle_irq
 	kernel_exit 
 
diff --git a/src/exp4b/src/fork.c b/src/exp4b/src/fork.c
index 472b389..bb2baca 100644
--- a/src/exp4b/src/fork.c
+++ b/src/exp4b/src/fork.c
@@ -14,13 +14,16 @@ int copy_process(unsigned long fn, unsigned long arg)
 	p->state = TASK_RUNNING;
 	p->counter = p->priority;
 	p->preempt_count = 1; //disable preemtion until schedule_tail
-
 	p->cpu_context.x19 = fn;
 	p->cpu_context.x20 = arg;
 	p->cpu_context.pc = (unsigned long)ret_from_fork;
 	p->cpu_context.sp = (unsigned long)p + THREAD_SIZE;
 	int pid = nr_tasks++;
 	task[pid] = p;	
+
+	p->pc_in_process = p->cpu_context.x19;
+	p->sp_in_process = p->cpu_context.sp;
+
 	preempt_enable();
 	return 0;
 }
diff --git a/src/exp4b/src/sched.S b/src/exp4b/src/sched.S
index 61dbf72..606373f 100644
--- a/src/exp4b/src/sched.S
+++ b/src/exp4b/src/sched.S
@@ -23,16 +23,6 @@ cpu_switch_to:
 	mov	sp, x9
 	ret							// branch to LR (which was just loaded from memory)
 
-.globl get_task_pc
-get_task_pc:
-	ldr x0, [x0, #90]
-	ret
-
-.globl get_task_sp
-get_task_sp:
-	ldr x0, [x0, #96]
-	ret
-
 // Registers x19 to x30 are callee-saved registers.
 // x30 (the link register) holds the return address for the function call, saving it ensures the task can resume execution from the correct point.
 // The stack pointer for the next task (x1's task) is loaded into sp.
diff --git a/src/exp4b/src/sched.c b/src/exp4b/src/sched.c
index 607c6db..29ef381 100644
--- a/src/exp4b/src/sched.c
+++ b/src/exp4b/src/sched.c
@@ -10,6 +10,11 @@ int nr_tasks = 1;
 struct context_switch_trace trace_buffer[TRACE_SIZE];
 int trace_index = 0;
 
+void get_current_task_pc_and_sp(unsigned long pc, unsigned long sp) {
+	current->pc_in_process = pc;
+	current->sp_in_process = sp;
+}
+
 void record_context_switch(int out_id, unsigned long out_pc, unsigned long out_sp,
                            int in_id, unsigned long in_pc, unsigned long in_sp) {
     if (trace_index < TRACE_SIZE) {
@@ -114,11 +119,10 @@ void switch_to(struct task_struct * next)
             break;
         }   
     }
-
-	unsigned long out_pc = current->cpu_context.pc;
-    unsigned long out_sp = current->cpu_context.sp;
-    unsigned long in_pc = get_task_pc(next);
-    unsigned long in_sp = get_task_sp(next);
+	unsigned long out_pc = current->pc_in_process;
+    unsigned long out_sp = current->sp_in_process;
+	unsigned long in_pc = next->pc_in_process;
+	unsigned long in_sp = next->sp_in_process;
 
 	record_context_switch(out_id, out_pc, out_sp, in_id, in_pc, in_sp);
 
diff --git a/src/exp4b/test.log b/src/exp4b/test.log
index 89d39ea..df733ff 100644
--- a/src/exp4b/test.log
+++ b/src/exp4b/test.log
@@ -2,5 +2,236 @@ Exception return from AArch64 EL2 to AArch64 EL1 PC 0x80038
 Taking exception 5 [IRQ]
 ...from EL1 to EL1
 ...with ESR 0x0/0x0
-...with ELR 0x836a4
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
+...to EL1 PC 0x82a80 PSTATE 0x3c5
+Exception return from AArch64 EL1 to AArch64 EL1 PC 0x83718
+Taking exception 5 [IRQ]
+...from EL1 to EL1
+...with ESR 0x0/0x0
+...with ELR 0x83718
 ...to EL1 PC 0x82a80 PSTATE 0x3c5
